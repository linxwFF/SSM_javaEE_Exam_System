<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.common.dao.DictsMapper" >
  <resultMap id="BaseResultMap" type="com.common.model.Dicts" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="code" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="code_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="value" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="text" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="remarks" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="deleted_at" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="created_at" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="updated_at" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, code, code_name, value, text, remarks, deleted_at, created_at, updated_at
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from dicts
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from dicts
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.common.model.Dicts" >
    insert into dicts (id, code, code_name, 
      value, text, remarks, 
      deleted_at, created_at, updated_at
      )
    values (#{id,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{codeName,jdbcType=VARCHAR}, 
      #{value,jdbcType=INTEGER}, #{text,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, 
      #{deletedAt,jdbcType=TIMESTAMP}, #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.common.model.Dicts" >
    insert into dicts
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="code != null" >
        code,
      </if>
      <if test="codeName != null" >
        code_name,
      </if>
      <if test="value != null" >
        value,
      </if>
      <if test="text != null" >
        text,
      </if>
      <if test="remarks != null" >
        remarks,
      </if>
      <if test="deletedAt != null" >
        deleted_at,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="codeName != null" >
        #{codeName,jdbcType=VARCHAR},
      </if>
      <if test="value != null" >
        #{value,jdbcType=INTEGER},
      </if>
      <if test="text != null" >
        #{text,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null" >
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="deletedAt != null" >
        #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.common.model.Dicts" >
    update dicts
    <set >
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="codeName != null" >
        code_name = #{codeName,jdbcType=VARCHAR},
      </if>
      <if test="value != null" >
        value = #{value,jdbcType=INTEGER},
      </if>
      <if test="text != null" >
        text = #{text,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null" >
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="deletedAt != null" >
        deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.common.model.Dicts" >
    update dicts
    set code = #{code,jdbcType=VARCHAR},
      code_name = #{codeName,jdbcType=VARCHAR},
      value = #{value,jdbcType=INTEGER},
      text = #{text,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findAllByCourse" resultMap="BaseResultMap" parameterType="map">
    select
    <include refid="Base_Column_List" />
    from dicts

    <where>
      <if test="findContent != null and findContent !='' " >
        and (
        LOWER(text) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")) or
        value = #{findContent}
        )
      </if>
      and deleted_at is null and value != 0
      and code = "course_type" and remarks = #{remarks}
    </where>
  </select>
</mapper>