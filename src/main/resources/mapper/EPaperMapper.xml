<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.common.dao.EPaperMapper" >
  <resultMap id="BaseResultMap" type="com.common.model.EPaper" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="type_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="course_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="chapter_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="mode" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="exam_title" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="state" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="exam_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="srandom" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="delete_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.common.model.EPaper" >
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_id" jdbcType="BIGINT" javaType="java.lang.Long" />
      <arg column="type_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="course_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="chapter_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="mode" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="exam_title" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="state" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="exam_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="srandom" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="update_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="delete_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <arg column="questions" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, type_id, course_id, chapter_id, mode, exam_title, state, exam_time, 
    srandom, update_time, create_time, delete_time
  </sql>
  <sql id="Blob_Column_List" >
    questions
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from e_paper
    where id = #{id,jdbcType=INTEGER}
  </select>

  <update id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    update e_paper
    set
    delete_time = now()
    where id = #{id,jdbcType=INTEGER}
  </update>

  <insert id="insert" parameterType="com.common.model.EPaper" >
    insert into e_paper (id, user_id, type_id, 
      course_id, chapter_id, mode, 
      exam_title, state, exam_time, 
      srandom, update_time, create_time, 
      questions)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=BIGINT}, #{typeId,jdbcType=INTEGER}, 
      #{courseId,jdbcType=INTEGER}, #{chapterId,jdbcType=INTEGER}, #{mode,jdbcType=INTEGER}, 
      #{examTitle,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{examTime,jdbcType=INTEGER}, 
      #{srandom,jdbcType=VARCHAR}, now(), now(),
       #{questions,jdbcType=LONGVARCHAR})
  </insert>

  <insert id="insertSelective" parameterType="com.common.model.EPaper" >
    insert into e_paper
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="typeId != null" >
        type_id,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="chapterId != null" >
        chapter_id,
      </if>
      <if test="mode != null" >
        mode,
      </if>
      <if test="examTitle != null" >
        exam_title,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="examTime != null" >
        exam_time,
      </if>
      <if test="srandom != null" >
        srandom,
      </if>
        update_time,
        create_time,
      <if test="questions != null" >
        questions,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="typeId != null" >
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="chapterId != null" >
        #{chapterId,jdbcType=INTEGER},
      </if>
      <if test="mode != null" >
        #{mode,jdbcType=INTEGER},
      </if>
      <if test="examTitle != null" >
        #{examTitle,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="examTime != null" >
        #{examTime,jdbcType=INTEGER},
      </if>
      <if test="srandom != null" >
        #{srandom,jdbcType=VARCHAR},
      </if>
        now(),
        now(),
      <if test="questions != null" >
        #{questions,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.common.model.EPaper" >
    update e_paper
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="typeId != null" >
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="chapterId != null" >
        chapter_id = #{chapterId,jdbcType=INTEGER},
      </if>
      <if test="mode != null" >
        mode = #{mode,jdbcType=INTEGER},
      </if>
      <if test="examTitle != null" >
        exam_title = #{examTitle,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="examTime != null" >
        exam_time = #{examTime,jdbcType=INTEGER},
      </if>
      <if test="srandom != null" >
        srandom = #{srandom,jdbcType=VARCHAR},
      </if>
        update_time = now(),
        create_time = now(),
      <if test="questions != null" >
        questions = #{questions,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.common.model.EPaper" >
    update e_paper
    set user_id = #{userId,jdbcType=BIGINT},
      type_id = #{typeId,jdbcType=INTEGER},
      course_id = #{courseId,jdbcType=INTEGER},
      chapter_id = #{chapterId,jdbcType=INTEGER},
      mode = #{mode,jdbcType=INTEGER},
      exam_title = #{examTitle,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      exam_time = #{examTime,jdbcType=INTEGER},
      srandom = #{srandom,jdbcType=VARCHAR},
      update_time = now(),
      questions = #{questions,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.common.model.EPaper" >
    update e_paper
    set user_id = #{userId,jdbcType=BIGINT},
      type_id = #{typeId,jdbcType=INTEGER},
      course_id = #{courseId,jdbcType=INTEGER},
      chapter_id = #{chapterId,jdbcType=INTEGER},
      mode = #{mode,jdbcType=INTEGER},
      exam_title = #{examTitle,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      exam_time = #{examTime,jdbcType=INTEGER},
      srandom = #{srandom,jdbcType=VARCHAR},
      update_time = now()
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findAllEPaperState0" parameterType="com.modules.exam.bo.EPapersCondition" resultMap="ResultMapWithBLOBs">
    SELECT
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    FROM e_paper
    <where>
      <if test="type != null and type !='' ">
        and type_id = #{type}
      </if>
      <if test="courseType != null and courseType !='' ">
        and course_id = #{courseType}
      </if>
      <if test="chapter_id != null and chapter_id !='' ">
        and chapter_id = #{chapter_id}
      </if>
      <if test="mode != null and mode !='' ">
        and mode = #{mode}
      </if>
      <if test="state != null and state !='' ">
        and state = #{state}
      </if>
      and user_id = #{user_id}
    </where>
  </select>

  <select id="findEpaperBySrandom" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from e_paper
    where srandom = #{srandom}
  </select>

  <update id="updateEPaperState" >
    update e_paper
    set
      state = #{state,jdbcType=INTEGER},
      update_time = now()
    where srandom = #{srandom,jdbcType=INTEGER}
  </update>
</mapper>